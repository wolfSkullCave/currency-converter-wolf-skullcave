[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = "wolf_skullcave", email = "7805222+wolfSkullCave@users.noreply.github.com"},
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "typer",
  "beautifulsoup4",
]
description = 'Convert USD and EUR to ZAR'
dynamic = ["version"]
keywords = []
license = "MIT"
name = "currency-converter-wolf-skullcave"
readme = "README.md"
requires-python = ">=3.8"

[project.urls]
Documentation = "https://github.com/wolfSkullCave/currency-converter-wolf-skullcave#readme"
Issues = "https://github.com/wolfSkullCave/currency-converter-wolf-skullcave/issues"
Source = "https://github.com/wolfSkullCave/currency-converter-wolf-skullcave"

# Provides an entry point for script
[project.scripts]
currency = "currency_converter_wolf_skullcave.main:app"

[tool.hatch.version]
path = "src/currency_converter_wolf_skullcave/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]

[tool.hatch.envs.dev]
dependencies = [
  "pip",
  "python-lsp-server",
  "marksman",
  "twine",
  "black",
]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/currency_converter_wolf_skullcave tests}"

[tool.coverage.run]
branch = true
omit = [
  "src/currency_converter_wolf_skullcave/__about__.py",
]
parallel = true
source_pkgs = ["currency_converter_wolf_skullcave", "tests"]

[tool.coverage.paths]
currency_converter_wolf_skullcave = [
  "src/currency_converter_wolf_skullcave",
  "*/currency-converter-wolf-skullcave/src/currency_converter_wolf_skullcave",
]
tests = ["tests", "*/currency-converter-wolf-skullcave/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
